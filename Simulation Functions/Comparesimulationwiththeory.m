function [parameters,bootstrapparamstd,Dlistdata,KSSTAT] = Comparesimulationwiththeory(input)
%% Allows users to compare simulated values to theoretical distribution
% input can be generated by running the Generateinputfile function


%%
totalparticles = input.Nparticles;
Dlistdata = [];
maxDfree = input.upperDfree+input.sigmaerror^2/min(input.frametimerange);
maxrangeD =-log(maxDfree*1e-10)*maxDfree;
rangeD =maxrangeD/(input.precision*2):maxrangeD/input.precision:maxrangeD;

%% Simulation part
for j = 1:length(input.frametimerange)
    input.frametime= input.frametimerange(j);                                               % Range of different frametimes possible
    for i = input.framerange
        input.NumberofFrames = i;
        input.Nparticles = round(input.distributionNparticles(i)*totalparticles);
        [Dlistdatatemp] = SimulationLocalizationandConfinement(input,false);
        Dlistdatatemp(2,:) = i;
        Dlistdatatemp(3,:) = input.frametime;
        Dlistdata = [Dlistdata Dlistdatatemp];
    end
end


%% Allow tracking window 
if input.compensatetracking == false
input.trackingwindow = 300;                                                                     % Setting tracking window above 100 cancels taking this into effect                                                     
end

%% Fitting part
if input.nofit == 0
[parameters,bootstrapparamstd,KSSTAT] = anaDDA(input,Dlistdata');                             % Actual fitting of data
else
parameters = [1 input.koff1_A input.kon1_A input.Dfree_A];                                      % Using same input parameters for both simulation and theoretical distribution
bootstrapparamstd = [0 0 0 0];
if numel(input.framerange) == 8 && input.plotlog == true
    f = figure;
    f.WindowState = 'maximized';
end
%% Plotting functions and calculation of KSSTAT
for i = 1:numel(input.frametimerange)
    for j = input.framerange
        framenr = j;
        if exist('tracks')
            truncation = framenr;
            [D] = GenerateDfromtracks(tracks,input,truncation);
        end
        if input.plotlog == true
        if numel(input.framerange) == 8
             subplot(4,2,j,'Parent',f)
             title(['D distribution for track length ' num2str(j) ' steps'])
            hold on
            plotlog(framenr,parameters,D(:,D(3,:)==input.frametime), input,rangeD,bootstrapparamstd,1,false)
         else
            figure
            title(['D distribution for track length ' num2str(j) ' steps'])
            hold on
            plotlog(framenr,parameters,D(:,D(3,:)==input.frametime), input,rangeD,bootstrapparamstd,1,true)
        end
        end

        if input.KSstats == true % Only calculate KSstats if true       
            [~,KSSTAT(i,j)]=kstestanaDDA(framenr,parameters,D(:,D(3,:)==input.frametime), input,rangeD,i);
        else
            KSSTAT = 0;
        end
    end
end
% %% Generate plots and calculate KSSTAT values
% for i = 1:numel(input.frametimerange)
%     input.frametime = input.frametimerange(i);  
% for j = input.framerange
%     framenr = j;
%     if input.KSstats == true % Only calculate KSstats if true       
%         [~,KSSTAT(i,j)]=kstestanaDDA(framenr,parameters,Dlistdata(:,Dlistdata(3,:)==input.frametime), input,rangeD,i);
%     else
%         KSSTAT = 0;
%     end
%     if input.plotlog == true % Only plot if this is true
%         figure
%         hold on
%         plotlog(framenr,parameters,Dlistdata(:,Dlistdata(3,:)==input.frametime), input,rangeD,bootstrapparamstd,i)
%    end
% end
% end
% KSSTAT = KSSTAT(KSSTAT>0);
end